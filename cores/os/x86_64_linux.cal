enable IO
enable File
enable Args
enable Time
enable Heap
enable Exit
restrict IO
restrict File
restrict Args
restrict Time
restrict Heap
restrict Exit

let addr __linux_argv
let cell __linux_argc

version LibC
	func unsafe __x86_64_program_init begin asm
		"mov [&{global __linux_argc}], edi"
		"mov [&{global __linux_argv}], rsi"
	end end
end

version not LibC
	func unsafe __x86_64_program_init begin asm
		"lea rax, [rsp + 16]"
		"mov [&{global __linux_argv}], rax"
		"mov rax, [rsp + 8]"
		"mov [&{global __linux_argc}], rax"
	end end
end

func unsafe __x86_64_program_exit begin asm
	"mov rax, 60"
	"mov rdi, 0"
	"syscall"
end end

version IO
	func man unsafe print_ch cell ch begin asm
		"sub r15, 8"
		"mov rsi, r15"
		"mov rax, 1"
		"mov rdi, 1"
		"mov rdx, 1"
		"syscall"
	end end
end

version Exit
	func man unsafe exit cell code begin
		__x86_64_pop_rdi
		asm
			"mov rax, 60"
			"syscall"
		end
	end
end

version Time
	func man unsafe get_epoch_time -> cell time begin
		asm
			"mov rax, 201" # time syscall
			"xor rdi, rdi"
			"syscall"
		end
		__x86_64_push_rax # stuff is returned with rax right?
		# yes.
	end
end

version File
	const FILE_READ  1
	const FILE_WRITE 2
	const SEEK_SET   0
	const SEEK_CUR   1
	const SEEK_END   2
	const __linux_const_O_RDONLY 0
	const __linux_const_O_WRONLY 1
	const __linux_const_O_RDWR   2
	const __linux_const_O_CREAT  64
	const __linux_const_S_IRUSR  256
	const __linux_const_S_IWUSR  128

	alias __linux_dev_t     u64
	alias __linux_ino_t     u64
	alias __linux_mode_t    u32
	alias __linux_nlink_t   u64
	alias __linux_uid_t     u32
	alias __linux_gid_t     u32
	alias __linux_off_t     u64
	alias __linux_time_t    u64
	alias __linux_blksize_t u64
	alias __linux_blkcnt_t  u64

	struct __linux_stat
		u64 st_dev
		u64 st_ino
		u64 st_nlink
		u32 st_mode
		u32 st_uid
		u32 st_gid
		u32 padding
		u64 st_rdev
		u64 st_size
		u64 st_blksize
		u64 st_blocks
		u64 st_atime
		u64 padding1
		u64 st_mtime
		u64 st_ctime
		array 24 u8 pad
	end

	struct File
		cell fd
	end

	let File stdin
	let File stdout
	let File stderr
	0 &stdin !
	1 &stdout !
	2 &stderr !

	func man unsafe __linux_create_file cell mode cell flags addr path begin
		# Path
		__x86_64_pop_rdi
		# Flags
		__linux_const_O_CREAT __x86_64_pop_rsi
		# Mode
		__linux_const_S_IWUSR __linux_const_S_IRUSR or __x86_64_pop_rdx
		asm
			"mov rax, 2" # Open
			"syscall"
			"mov rdi, rax"
			"mov rax, 3" # Close
			"syscall"
		end
	end

	func unsafe open_file ptr Array path cell mode ptr File file begin
		let array 4096 u8 pathBytes
		let cell i
		let addr src
		let addr dest
		let cell flags
		0 -> i

		# clear pathBytes
		&pathBytes -> dest
		while i 4096 < do
			0 dest b!
			i 1 + -> i
			dest 1 + -> dest
		end

		path.elements -> src
		&pathBytes -> dest
		0 -> i
		while i path.length < do
			src b@ dest b!

			i 1 + -> i
			src 1 + -> src
			dest 1 + -> dest
		end

		# just in case
		0 &pathBytes 4095 + b!

		let cell modeFlag

		if FILE_READ FILE_WRITE or mode = then
			&pathBytes __linux_create_file
			__linux_const_O_RDWR -> modeFlag
		elseif FILE_READ mode = then
			__linux_const_O_RDONLY -> modeFlag
		elseif FILE_WRITE mode = then
			&pathBytes __linux_create_file
			__linux_const_O_WRONLY -> modeFlag
		end

		&pathBytes
		flags modeFlag or

		__x86_64_pop_rsi
		__x86_64_pop_rdi
		asm
			"mov rax, 2" # open syscall
			"xor rdx, rdx"
			"syscall"
		end

		__x86_64_push_rax -> file.fd
	end

	func man unsafe close_file ptr File file begin
		@ __x86_64_pop_rdi # FD
		asm
			"mov rax, 3" # Close
			"syscall"
		end
	end

	func man unsafe file@ addr buffer cell length ptr File file begin
		@ __x86_64_pop_rdi # Fd
		__x86_64_pop_rdx   # Length
		__x86_64_pop_rsi   # Buffer

		asm
			"mov rax, 0" # read
			"syscall"
		end
	end

	func man unsafe file! addr buffer cell length ptr File file begin
		@ __x86_64_pop_rdi # Fd
		__x86_64_pop_rdx   # Length
		__x86_64_pop_rsi   # Buffer

		asm
			"mov rax, 1" # write
			"syscall"
		end # TODO: throw if error
	end

	func man unsafe file_seek cell offset cell whence ptr File file begin
		@ __x86_64_pop_rdi # Fd
		__x86_64_pop_rdx # Whence
		__x86_64_pop_rsi # Offset

		asm
			"mov rax, 8" # lseek
			"syscall"
		end
	end

	func man unsafe file_peek ptr File file -> cell where begin
		@ __x86_64_pop_rdi
		asm
			"mov rdx, 1" # SEEK_CUR
			"xor rsi, rsi"
			"mov rax, 8" # lseek
			"syscall"
		end
		__x86_64_push_rax
	end
end

version Args
	func man core_get_arg cell which -> addr str begin
		8 * __linux_argv + @
	end

	inline core_get_arg_length -> cell len begin __linux_argc end
end

version Heap
	version LibC
		extern C addr malloc usize as alloc
		extern C addr realloc addr usize end
		extern C void free addr end
	end

	version not LibC
		const __linux_PROT_READ        1
		const __linux_PROT_WRITE       2
		const __linux_MAP_PRIVATE      2
		const __linux_MAP_ANONYMOUS    32
		const __linux_MREMAP_MAYMOVE   1
		const __linux_MREMAP_FIXED     2
		const __linux_MREMAP_DONTUNMAP 4

		func man unsafe __linux_mmap
			addr address cell len cell prot cell flags cell fd cell pgoff -> addr res
		begin
			__x86_64_pop_r9  # pgoff
			__x86_64_pop_r8  # fd
			__x86_64_pop_r10 # flags
			__x86_64_pop_rdx # prot
			__x86_64_pop_rsi # len
			__x86_64_pop_rdi # addr

			asm
				"mov rax, 9" # mmap syscall
				"syscall"
			end

			__x86_64_push_rax
		end

		func alloc cell sz -> addr res begin
			0 sz 8 + __linux_PROT_READ __linux_PROT_WRITE or
			__linux_MAP_PRIVATE __linux_MAP_ANONYMOUS or -1 0 __linux_mmap

			dup sz swap ! # write size
			8 +
		end

		func man unsafe __linux_mremap
			addr address cell oldLen cell newLen cell flags addr newAddr -> addr res
		begin
			__x86_64_pop_r8  # new_addr
			__x86_64_pop_r10 # flags
			__x86_64_pop_rdx # new_len
			__x86_64_pop_rsi # old_len
			__x86_64_pop_rdi # addr

			asm
				"mov rax, 25" # mremap syscall
				"syscall"
			end

			__x86_64_push_rax
		end

		func man unsafe __linux_munmap addr address cell length -> cell res begin
			__x86_64_pop_rsi # length
			__x86_64_pop_rdi # addr

			asm
				"mov rax, 11" # munmap syscall
				"syscall"
			end

			__x86_64_push_rax
		end

		func man free addr address begin
			dup 8 - @ swap 8 - swap 8 + __linux_munmap drop
		end

		func __copy_mem addr dest addr src cell n begin
			let cell i

			while i n < do
				version CallistoScript
					src @ dest !
				end
				version not CallistoScript
					src b@ dest b!
				end
				i 1 + -> i
				dest 1 + -> dest
				src 1 + -> src
			end
		end

		func realloc addr address usize sz -> addr address begin
			let addr oldAddr
			address -> oldAddr

			if address 0 = then
				if sz 0 = then 0 else sz alloc end
			elseif sz 0 = then
				address free 0
			else
				sz 8 + -> sz
				address 8 - -> address

				let usize oldSz
				address @ 8 + -> oldSz

				let addr address2
				sz alloc 8 - -> address2

				let addr ret
				address2 oldSz sz __linux_MREMAP_MAYMOVE 0 __linux_mremap -> ret

				if ret 8000000000000000 and then
					sz alloc -> ret

					# copy old data
					ret oldAddr sz 8 - __copy_mem

					# free old data
					oldAddr free

					# write new size
					sz ret 8 - !

					ret return
				end

				# write new size
				sz ret !

				ret 8 +
			end
		end
	end
end

version IO version Exit
	func __core_a@ cell offset addr arr -> cell value begin
		arr Array.memberSize + @ offset * -> offset
		arr Array.elements + @ offset +

		version CallistoScript
			if arr Array.memberSize + @ 1 = then
				@
			else
				return # TODO!!!
			end
		end

		version not CallistoScript
			if arr Array.memberSize + @ 1 = then
				b@
			elseif arr Array.memberSize + @ 2 = then
				version 16Bit
					w@
				end
				version not 16Bit
					# TODO!!!
				end
			elseif arr Array.memberSize + @ 4 = then
				version 32Bit
					d@
				end
				version not 32Bit
					# TODO!!!
				end
			else
				@
			end
		end
	end

	func __core_printstr addr arr begin
		let usize length
		let usize i

		arr @ -> length

		while i length < do
			i arr __core_a@ print_ch
			i 1 + -> i
		end
	end

	inline __core_new_line begin
		13 print_ch 10 print_ch
	end

	func __x86_64_exception begin
		c"Unhandled exception: " __core_printstr
		&_cal_exception Exception.msg + __core_printstr __core_new_line
		1 exit
	end
end end
