enable IO
enable Exit
restrict IO
restrict File
restrict Args
restrict Time
restrict Heap
restrict Exit

inline unsafe __x86_64_program_init begin
end

inline unsafe __x86_64_program_exit begin
	asm
		"mov rax, 0x04" # exit
		"mov rdi, 0"
		"syscall"
	end	
end

version IO
	func man unsafe print_ch cell ch begin asm
		"sub r15, 8"
		"mov rdi, 1"
		"mov rsi, r15"
		"mov rdx, 1"
		"mov rax, 0x01" # write
		"syscall"
	end end
end

version Exit
	func man unsafe exit cell code begin
		__x86_64_pop_rdi
		asm
			"mov rax, 0x04" # exit
			"syscall"
		end
	end
end

version IO version Exit
	func __core_a@ cell offset addr arr -> cell value begin
		arr Array.memberSize + @ offset * -> offset
		arr Array.elements + @ offset +

		version CallistoScript
			if arr Array.memberSize + @ 1 = then
				@
			else
				return # TODO!!!
			end
		end

		version not CallistoScript
			if arr Array.memberSize + @ 1 = then
				b@
			elseif arr Array.memberSize + @ 2 = then
				version 16Bit
					w@
				end
				version not 16Bit
					# TODO!!!
				end
			elseif arr Array.memberSize + @ 4 = then
				version 32Bit
					d@
				end
				version not 32Bit
					# TODO!!!
				end
			else
				@
			end
		end
	end

	func __core_printstr addr arr begin
		let usize length
		let usize i

		arr @ -> length

		while i length < do
			i arr __core_a@ print_ch
			i 1 + -> i
		end
	end

	inline __core_new_line begin
		13 print_ch 10 print_ch
	end

	func __x86_64_exception begin
		c"Unhandled exception: " __core_printstr
		&_cal_exception Exception.msg + __core_printstr __core_new_line
		1 exit
	end
end end
