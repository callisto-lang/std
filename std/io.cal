requires IO

include "array.cal"

func man print_dec_loop cell num begin
	if dup then
		dup 10 / print_dec_loop
		10 % 48 + print_ch
	else
		drop
	end
end

## ## print_dec
## Parameters: cell value
##
## Prints the given value as decimal to stdout
func man print_dec cell value begin
	if dup then
		print_dec_loop
	else
		drop 48 print_ch
	end
end

func man print_hex_loop cell num begin
	if dup then
		dup 16 / print_hex_loop
		16 %
		if dup 9 <= then
			48 + print_ch
		else
			55 + print_ch
		end
	else
		drop
	end
end

## ## print_hex
## Parameters: cell value
##
## Prints the given value as hexadecimal to stdout
func man print_hex cell num begin
	if dup then
		print_hex_loop
	else
		drop 48 print_ch
	end
end

## ## print_str
## Parameters: Array* str
##
## Prints the given string to stdout
func print_str ptr Array arr begin
	let usize i

	while i arr.length < do
		i arr a@ print_ch
		i 1 + -> i
	end
end

## ## print_bool
## Parameters: bool value
##
## Prints the given boolean as "true" or "false" to stdout
inline man print_bool bool value begin
	if dup drop then
		c"true"
	else
		c"false"
	end
	print_str
end

## ## new_line
## Parameters:
##
## Prints a new line to stdout
func new_line begin
	'\r' print_ch '\n' print_ch
end

# Removed until I add a way to get this to work in safe callisto
## ## printf
## Parameters: ..., Array* fmt
##
## Prints a formatted string (`fmt`) to stdout, format values are in reverse order of
## how they are written
##
## Formats:
##
## - `%s` - String (`Array*`)
## - `%d` - Decimal (`cell`)
## - `%X` - Hexadecimal (`cell`)
# func printf addr fmt begin
# 	let cell i
# 	let cell ch
# 
# 	while i fmt @ < do
# 		if i fmt a@ '%' = then
# 			i 1 + -> i
# 			i fmt a@ -> ch
# 
# 			if ch 's' = then
# 				print_str
# 			elseif ch 'd' = then
# 				print_dec
# 			elseif ch 'X' = then
# 				print_hex
# 			end
# 		else
# 			i fmt a@ print_ch
# 		end
# 
# 		i 1 + -> i
# 	end
# end

version Heap
	include "vector.cal"

	## ## read_line
	## Parameters: ptr Vector res
	##
	## Reads from stdin to `res`
	func read_line ptr Vector res begin
		u8.sizeOf res init_vec

		let u8 ch
		while ch '\n' = not ch '\r' = not or do
			&ch 1 &stdin file@
			ch res vec_push
		end

		res vec_pop # remove the new line character
	end
end
