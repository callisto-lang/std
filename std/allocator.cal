include "std/ops.cal"
include "std/io.cal"

## ## struct Allocator
## Members:
## 
## - `addr alloc` (function pointer: `usize sz -> addr address`)
## - `addr realloc` (function pointer: `addr address, usize sz -> addr address`)
## - `addr free` (function pointer: `addr address`)
struct Allocator
	addr alloc
	addr realloc
	addr free
end

## ## a_alloc
## Parameters: `ptr Allocator allocator, usize sz`
##
## Returns: `addr address`
##
## Calls the alloc function on the given allocator, and throws if this method is
## not implemented
func error a_alloc ptr Allocator allocator usize sz -> addr address begin
	if allocator.alloc 0 = then
		c"Allocator has not implemented alloc function" throw
	end

	unsafe -> addr address begin
		allocator sz allocator.alloc call
	end
end

## ## a_realloc
## Parameters: `ptr Allocator allocator, addr address, usize sz`
#
## Returns: `addr address`
##
## Calls the realloc function on the given allocator, and throws if this method is
## not implemented
func error a_realloc ptr Allocator allocator addr address usize sz -> addr address begin
	if allocator.realloc 0 = then
		c"Allocator has not implemented realloc function" throw
	end

	unsafe -> addr address begin
		allocator address sz allocator.realloc call
	end
end

## ## a_free
## Parameters: `ptr Allocator allocator, addr address`
##
## Calls the free function on the given allocator, and throws if this method is not
## implemented
func error a_free ptr Allocator allocator addr address begin
	if allocator.free 0 = then
		c"Allocator has not implemented free function" throw
	end

	unsafe begin
		allocator address allocator.free call
	end
end

version Heap
	## ## struct HeapAllocator
	## Inherits from `Allocator`, is used for allocating on the heap
	##
	## Only exists if the `Heap` version is enabled
	struct HeapAllocator : Allocator end

	implement HeapAllocator init
		let ptr HeapAllocator allocator
		-> allocator
		
		&alloc   -> allocator.alloc
		&realloc -> allocator.realloc
		&free    -> allocator.free
	end
end

## ## struct BlockAllocator
## Members:
## 
## - `addr alloc` (function pointer: `usize sz -> addr address`)
## - `addr realloc` (function pointer: `addr address, usize sz -> addr address`)
## - `addr free` (function pointer: `addr address`)
## - `usize block_size`       - The size of each block
## - `usize block_count`      - The amount of blocks the buffer has
## - `addr  allocated_blocks` - The bit array of allocated blocks
## - `addr  buffer`           - The buffer to allocate from
struct BlockAllocator : Allocator
	usize block_size
	usize block_count
	addr  allocated_blocks
	addr  buffer
end

func error _block_allocator_alloc ptr BlockAllocator allocator usize sz -> addr address begin
	if sz 0 = then 0 return end

	if allocator.block_count 0 = then
		c"Block allocator has not been initialized" throw
	end
	
	if sz allocator.block_size > then
		c"Requested memory can't fit in a single block" throw
	end
	
	let cell i 0 -> i
	while i allocator.block_count < do
		allocator.allocated_blocks i 3 >> + b@
		if dup i 7 and >> 1 and 0 = then
			1 i 7 and << or allocator.allocated_blocks i 3 >> + b!
			allocator.buffer i allocator.block_size * + return
			0
		end
		drop
		i ++ -> i
	end
	
	c"Out of memory" throw
end

func error _block_allocator_free ptr BlockAllocator allocator addr address begin
	if address 0 = then return end
	
	if allocator.block_count 0 = then
		c"Block allocator has not been initialized" throw
	end
	address allocator.buffer -
	if dup allocator.block_size % 0 = not then
		c"Attempted to free memory that wasn't allocated with this block allocator" throw
	end
	
	allocator.block_size /
	if dup dup 0 < swap allocator.block_count >= or then
		c"Attempted to free memory that wasn't allocated with this block allocator" throw
	end
	
	let cell block_index -> block_index
	allocator.allocated_blocks block_index 3 >> + b@
	if dup block_index 7 and >> 1 and 0 = then
		c"Attempted to free memory that wasn't allocated with this block allocator" throw
	end
	
	1 block_index 8 % << not and
	allocator.allocated_blocks block_index allocator.block_size * + b!
end

func error _block_allocator_realloc ptr BlockAllocator allocator addr address usize sz -> addr address begin
	if allocator.block_count 0 = then
		c"Block allocator has not been initialized" throw
	end
	
	if sz allocator.block_size > then
		c"Requested memory can't fit in a single block" throw
	end
	
	if sz 0 = then allocator address _block_allocator_free 0 return end
	if address 0 = then allocator sz _block_allocator_alloc return end
	
	address
end

implement BlockAllocator init
	let ptr BlockAllocator allocator
	-> allocator
	
	&_block_allocator_alloc   -> allocator.alloc
	&_block_allocator_realloc -> allocator.realloc
	&_block_allocator_free    -> allocator.free
	
	0 -> allocator.block_size
	0 -> allocator.block_count
	0 -> allocator.allocated_blocks
	0 -> allocator.buffer
end

## ## block_allocator_init
## Parameters: `ptr BlockAllocator allocator, usize block_size, usize block_count, addr allocated_blocks, addr buffer`
##
## Initializes a block allocator
## allocated_blocks points to ceil(block_count / 8) bytes of memory to keep track of blocks that have been allocated
## buffer points to block_size * block_count bytes of memory
func block_allocator_init ptr BlockAllocator allocator usize block_size usize block_count addr allocated_blocks addr buffer begin
	block_size       -> allocator.block_size
	block_count      -> allocator.block_count
	allocated_blocks -> allocator.allocated_blocks
	buffer           -> allocator.buffer
	
	allocated_blocks block_count 7 + 3 >> 0 fill_mem
end

## ## struct ArenaAllocator
## Members:
## 
## - `addr alloc` (function pointer: `usize sz -> addr address`)
## - `addr realloc` (function pointer: `addr address, usize sz -> addr address`)
## - `addr free` (function pointer: `addr address`)
## - `addr  buffer`      - pointer to the buffer to allocate memory from
## - `usize buffer_size` - size of the buffer
## - `usize offset`      - offset of the next block to be allocated
struct ArenaAllocator : Allocator
	addr  buffer
	usize buffer_size
	usize offset
end

func error _arena_allocator_alloc ptr ArenaAllocator allocator usize sz -> addr address begin
	if allocator.buffer_size 0 = then
		c"Arena allocator has not been initialized" throw
	end
	
	if sz allocator.offset + allocator.buffer_size > then
		c"Out of memory" throw
	end
	
	allocator.buffer allocator.offset +
	allocator.offset sz + -> allocator.offset
	return
end

implement ArenaAllocator init
	let ptr ArenaAllocator allocator
	-> allocator
	
	&_arena_allocator_alloc -> allocator.alloc
	0                       -> allocator.realloc
	0                       -> allocator.free
	
	0 -> allocator.buffer
	0 -> allocator.buffer_size
	0 -> allocator.offset
end

## ## arena_allocator_init
## Parameters: `ptr BlockAllocator allocator, addr buffer, usize buffer_size`
##
## Initializes an arena allocator
func arena_allocator_init ptr ArenaAllocator allocator addr buffer usize buffer_size begin
	buffer      -> allocator.buffer
	buffer_size -> allocator.buffer_size
	0           -> allocator.offset
end
